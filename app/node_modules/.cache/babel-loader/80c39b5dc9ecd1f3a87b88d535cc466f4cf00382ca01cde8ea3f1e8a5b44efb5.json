{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mirch\\\\OneDrive\\\\Documents\\\\PersonalPortfolio-Client\\\\app\\\\src\\\\components\\\\Carousel.js\",\n  _s = $RefreshSig$();\nimport { React } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = ['https://images.unsplash.com/photo-1506501139174-099022df5260?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1351&q=80', 'https://images.unsplash.com/photo-1523438097201-512ae7d59c44?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80', 'https://images.unsplash.com/photo-1513026705753-bc3fffca8bf4?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80'];\n// images must be an array of urls , if using Next JS this could something like\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\n// images must be an array of urls , if using Next JS this could something like\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\n\nexport const Carousel = () => {\n  _s();\n  // We will start by storing the index of the current image in the state.\n  const [currentImage, setCurrentImage] = React.useState(0);\n\n  // We are using react ref to 'tag' each of the images. Below will create an array of\n  // objects with numbered keys. We will use those numbers (i) later to access a ref of a\n  // specific image in this array.\n  const refs = images.reduce((acc, val, i) => {\n    acc[i] = React.createRef();\n    return acc;\n  }, {});\n  const scrollToImage = i => {\n    // First let's set the index of the image we want to see next\n    setCurrentImage(i);\n    // Now, this is where the magic happens. We 'tagged' each one of the images with a ref,\n    // we can then use built-in scrollIntoView API to do eaxactly what it says on the box - scroll it into\n    // your current view! To do so we pass an index of the image, which is then use to identify our current\n    // image's ref in 'refs' array above.\n    refs[i].current.scrollIntoView({\n      //     Defines the transition animation.\n      behavior: 'smooth',\n      //      Defines vertical alignment.\n      block: 'nearest',\n      //      Defines horizontal alignment.\n      inline: 'start'\n    });\n  };\n\n  // Some validation for checking the array length could be added if needed\n  const totalImages = images.length;\n\n  // Below functions will assure that after last image we'll scroll back to the start,\n  // or another way round - first to last in previousImage method.\n  const nextImage = () => {\n    if (currentImage >= totalImages - 1) {\n      scrollToImage(0);\n    } else {\n      scrollToImage(currentImage + 1);\n    }\n  };\n  const previousImage = () => {\n    if (currentImage === 0) {\n      scrollToImage(totalImages - 1);\n    } else {\n      scrollToImage(currentImage - 1);\n    }\n  };\n\n  // Tailwind styles. Most importantly notice position absolute, this will sit relative to the carousel's outer div.\n  const arrowStyle = 'absolute text-white text-2xl z-10 bg-black h-10 w-10 rounded-full opacity-75 flex items-center justify-center';\n\n  // Let's create dynamic buttons. It can be either left or right. Using\n  // isLeft boolean we can determine which side we'll be rendering our button\n  // as well as change its position and content.\n  const sliderControl = isLeft => /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: isLeft ? previousImage : nextImage,\n    className: `${arrowStyle} ${isLeft ? 'left-2' : 'right-2'}`,\n    style: {\n      top: '40%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      role: \"img\",\n      \"aria-label\": `Arrow ${isLeft ? 'left' : 'right'}`,\n      children: isLeft ? '◀' : '▶'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n  return (\n    /*#__PURE__*/\n    // Images are placed using inline flex. We then wrap an image in a div\n    // with flex-shrink-0 to stop it from 'shrinking' to fit the outer div.\n    // Finally the image itself will be 100% of a parent div. Outer div is\n    // set with position relative, so we can place our cotrol buttons using\n    // absolute positioning on each side of the image.\n    _jsxDEV(\"div\", {\n      className: \"p-12 flex justify-center w-screen md:w-1/2 items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative w-full\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"carousel\",\n          children: [sliderControl(true), images.map((img, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full flex-shrink-0\",\n            ref: refs[i],\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: img,\n              className: \"w-full object-contain\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this)\n          }, img, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)), sliderControl()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n//APP Component\n_s(Carousel, \"cnc9rbhP80fTHOrqNEzwhjBY+h0=\");\n_c = Carousel;\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-screen flex justify-center\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n}\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 119,\n  columnNumber: 17\n}, this), document.getElementById('root'));\nvar _c;\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"names":["React","ReactDOM","images","Carousel","currentImage","setCurrentImage","useState","refs","reduce","acc","val","i","createRef","scrollToImage","current","scrollIntoView","behavior","block","inline","totalImages","length","nextImage","previousImage","arrowStyle","sliderControl","isLeft","top","map","img","App","Component","constructor","props","render","document","getElementById"],"sources":["C:/Users/Mirch/OneDrive/Documents/PersonalPortfolio-Client/app/src/components/Carousel.js"],"sourcesContent":["import {React} from 'react'\r\nimport ReactDOM from 'react-dom';\r\nconst images = ['https://images.unsplash.com/photo-1506501139174-099022df5260?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1351&q=80', 'https://images.unsplash.com/photo-1523438097201-512ae7d59c44?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80', 'https://images.unsplash.com/photo-1513026705753-bc3fffca8bf4?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1350&q=80']\r\n// images must be an array of urls , if using Next JS this could something like\r\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\r\n// images must be an array of urls , if using Next JS this could something like\r\n// const images = ['/img/img1.png', '/img/img2.png', '/img/img3.png']\r\n\r\n\r\nexport const Carousel = () => {\r\n  // We will start by storing the index of the current image in the state.\r\n  const [currentImage, setCurrentImage] = React.useState(0);\r\n\r\n  // We are using react ref to 'tag' each of the images. Below will create an array of\r\n  // objects with numbered keys. We will use those numbers (i) later to access a ref of a\r\n  // specific image in this array.\r\n  const refs = images.reduce((acc, val, i) => {\r\n    acc[i] = React.createRef();\r\n    return acc;\r\n  }, {});\r\n\r\n  const scrollToImage = i => {\r\n    // First let's set the index of the image we want to see next\r\n    setCurrentImage(i);\r\n    // Now, this is where the magic happens. We 'tagged' each one of the images with a ref,\r\n    // we can then use built-in scrollIntoView API to do eaxactly what it says on the box - scroll it into\r\n    // your current view! To do so we pass an index of the image, which is then use to identify our current\r\n    // image's ref in 'refs' array above.\r\n    refs[i].current.scrollIntoView({\r\n      //     Defines the transition animation.\r\n      behavior: 'smooth',\r\n      //      Defines vertical alignment.\r\n      block: 'nearest',\r\n      //      Defines horizontal alignment.\r\n      inline: 'start',\r\n    });\r\n  };\r\n\r\n  // Some validation for checking the array length could be added if needed\r\n  const totalImages = images.length;\r\n\r\n  // Below functions will assure that after last image we'll scroll back to the start,\r\n  // or another way round - first to last in previousImage method.\r\n  const nextImage = () => {\r\n    if (currentImage >= totalImages - 1) {\r\n      scrollToImage(0);\r\n    } else {\r\n      scrollToImage(currentImage + 1);\r\n    }\r\n  };\r\n\r\n  const previousImage = () => {\r\n    if (currentImage === 0) {\r\n      scrollToImage(totalImages - 1);\r\n    } else {\r\n      scrollToImage(currentImage - 1);\r\n    }\r\n  };\r\n\r\n  // Tailwind styles. Most importantly notice position absolute, this will sit relative to the carousel's outer div.\r\n  const arrowStyle =\r\n    'absolute text-white text-2xl z-10 bg-black h-10 w-10 rounded-full opacity-75 flex items-center justify-center';\r\n\r\n  // Let's create dynamic buttons. It can be either left or right. Using\r\n  // isLeft boolean we can determine which side we'll be rendering our button\r\n  // as well as change its position and content.\r\n  const sliderControl = isLeft => (\r\n    <button\r\n      type=\"button\"\r\n      onClick={isLeft ? previousImage : nextImage}\r\n      className={`${arrowStyle} ${isLeft ? 'left-2' : 'right-2'}`}\r\n      style={{ top: '40%' }}\r\n    >\r\n      <span role=\"img\" aria-label={`Arrow ${isLeft ? 'left' : 'right'}`}>\r\n        {isLeft ? '◀' : '▶'}\r\n      </span>\r\n    </button>\r\n  );\r\n\r\n  return (\r\n  // Images are placed using inline flex. We then wrap an image in a div\r\n  // with flex-shrink-0 to stop it from 'shrinking' to fit the outer div.\r\n  // Finally the image itself will be 100% of a parent div. Outer div is\r\n  // set with position relative, so we can place our cotrol buttons using\r\n  // absolute positioning on each side of the image.\r\n    <div className=\"p-12 flex justify-center w-screen md:w-1/2 items-center\">\r\n      <div className=\"relative w-full\">\r\n        <div className=\"carousel\">\r\n          {sliderControl(true)}\r\n          {images.map((img, i) => (\r\n            <div className=\"w-full flex-shrink-0\" key={img} ref={refs[i]}>\r\n              <img src={img} className=\"w-full object-contain\" />\r\n            </div>\r\n          ))}\r\n          {sliderControl()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n//APP Component\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"w-screen flex justify-center\">\r\n        \r\n       </div>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}